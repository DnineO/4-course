<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=win-1251">
</head>
<body text=black bgcolor=white link=blue vlink=blue alink=red>
<link rel=stylesheet type=text/css href=../../1.css>
<font color=red><h2 align=center>Шаг 12 - Полноэкранный режим.</h2></font>
Ну если в дверях никто не застрял, то перейдем к следующему шагу.
<p>Те, кто шагает с нами в ногу наверное уже столкнулись с проблемой отладки полноэкранного приложения. И это верно. Если кто-нибудь отлаживал приложения под <b>Linux</b> в <b>SVGA</b> режиме или хотя бы под <b>DOS</b>-ом в <b>x-mode</b>, то наверняка знает, что без <b>remote debuger</b>-а жить очень трудно. Но!!! Нас же никто не заставляет работать в полноэкранном режиме пока мы пишем и отлаживаем программу. А потом, в <b>release</b> мы всегда сможем переключиться в полноэкранный режим (да и сейчас это никто не мешает сделать, достаточно объявить какую-нибудь константу и в зависимости от ее состояния переключаться в оконный или полноэкранный режим). Поэтому давайте немного переделаем скелет нашего приложения так, чтобы оно работало в окне. Тогда мы сможем легко пользоваться отладчиком <b>VC++</b>, <b>MFC Tracer</b>-ом и всякими другими приятными штучками.
<p>Я не буду подробно расписывать все шаги как я это делал первый раз при создании <b>full screen</b> приложения.  
<p>Все различия касаются только функции <b>WinMain</b>.
<p>По сути дела мы добавили в стили окна параметр <b>WS_OVERLAPPEDWINDOW</b> и больше не возимся с сохранением контекста отображения, т.е. со структурой <b>DEVMODE</b>.
<p>Как говорится: "Найдите 10 отличий".
<p>И еще один момент. К сожалению есть реализации <b>opengl32.dll</b> и <b>glu32.dll</b>, с которыми наше приложение работает не совсем корректно. В часности у меня стояли <b>dll</b>-ки от <b>SGI</b> и при изменении размеров окна приложение завершается с ошибкой. Я проверял работу на "чистом" <b>Win98</b> и <b>WinNT 4.0</b> - все работает. Если у вас что-то не работает, сообщайте мне. Будем искать ошибку вместе.
<p>Перейдем к основной теме.
<p>Создадим новый проект. Я назвал его <b>PiraCube</b>. Скоприруйте в него шаблон, о котором я говорил выше, т.е. я имею в виду скелет оконного приложения под <b>Windows</b> и начнем портить исходник. Изменения кода будут касаться опять только функции <b>Draw()</b>
<pre>
void Draw(void)
{
	// как обычно указываем какие буферы будем чистить
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// обнуляем текущую матрицу
	glLoadIdentity();

	// отскакиваем назад и влево ( по Х ) и поворачиваем относительно Y и Z
	glTranslatef(-1.5f, 0.0f, -5.0f);
	glRotatef(Trot, 0.0f, 1.0f, 1.0f);

	// Начинаем рисовать все грани пирамидки
	glBegin(GL_TRIANGLES);
		glColor3f(1.0f,0.0f,0.0f);		
	glVertex3f( 0.0f, 1.0f, 0.0f);	
		glColor3f(0.0f,1.0f,0.0f);		
		glVertex3f(-1.0f,-1.0f, 1.0f);	
		glColor3f(0.0f,0.0f,1.0f);		
		glVertex3f( 1.0f,-1.0f, 1.0f);	

		glColor3f(1.0f,0.0f,0.0f);		
		glVertex3f( 0.0f, 1.0f, 0.0f);	
		glColor3f(0.0f,0.0f,1.0f);		 
		glVertex3f( 1.0f,-1.0f, 1.0f);	
		glColor3f(0.0f,1.0f,0.0f);		
		glVertex3f( 1.0f,-1.0f, -1.0f);	

		glColor3f(1.0f,0.0f,0.0f);		
	glVertex3f( 0.0f, 1.0f, 0.0f);	
		glColor3f(0.0f,1.0f,0.0f);		
		glVertex3f( 1.0f,-1.0f, -1.0f);	
		glColor3f(0.0f,0.0f,1.0f);		
		glVertex3f(-1.0f,-1.0f, -1.0f);	

		glColor3f(1.0f,0.0f,0.0f);		
		glVertex3f( 0.0f, 1.0f, 0.0f);	
		glColor3f(0.0f,0.0f,1.0f);		
		glVertex3f(-1.0f,-1.0f,-1.0f);
		glColor3f(0.0f,1.0f,0.0f);	
		glVertex3f(-1.0f,-1.0f, 1.0f);
	glEnd();

	// очищаем матрицу
	glLoadIdentity();
	
	// переносимся и поворачиваемся
	glTranslatef(1.5f, 0.0f, -5.0f);
	glRotatef(Qrot, 1.0f, 1.0f, 0.0f);

	// рисуем кубик
	glBegin(GL_QUADS);
		glColor3f(0.0f,1.0f,0.0f);	
		glVertex3f( 1.0f, 1.0f,-1.0f);
		glVertex3f(-1.0f, 1.0f,-1.0f);
		glVertex3f(-1.0f, 1.0f, 1.0f);
		glVertex3f( 1.0f, 1.0f, 1.0f); 

		glColor3f(1.0f,0.5f,0.0f);
		glVertex3f( 1.0f,-1.0f, 1.0f);
		glVertex3f(-1.0f,-1.0f, 1.0f);
		glVertex3f(-1.0f,-1.0f,-1.0f);
		glVertex3f( 1.0f,-1.0f,-1.0f); 

		glColor3f(1.0f,0.0f,0.0f);
		glVertex3f( 1.0f, 1.0f, 1.0f);
		glVertex3f(-1.0f, 1.0f, 1.0f);
		glVertex3f(-1.0f,-1.0f, 1.0f);
		glVertex3f( 1.0f,-1.0f, 1.0f); 

		glColor3f(1.0f,1.0f,0.0f);
		glVertex3f( 1.0f,-1.0f,-1.0f);
		glVertex3f(-1.0f,-1.0f,-1.0f);
		glVertex3f(-1.0f, 1.0f,-1.0f);
		glVertex3f( 1.0f, 1.0f,-1.0f);
 
		glColor3f(0.0f,0.0f,1.0f);	
		glVertex3f(-1.0f, 1.0f, 1.0f);
		glVertex3f(-1.0f, 1.0f,-1.0f);
		glVertex3f(-1.0f,-1.0f,-1.0f);
		glVertex3f(-1.0f,-1.0f, 1.0f);
 
		glColor3f(1.0f,0.0f,1.0f);	
		glVertex3f( 1.0f, 1.0f,-1.0f);
		glVertex3f( 1.0f, 1.0f, 1.0f);
		glVertex3f( 1.0f,-1.0f, 1.0f);
		glVertex3f( 1.0f,-1.0f,-1.0f);
	glEnd();
	
	// Поврачиваемся еще немного
	Trot += 0.3f;
	Qrot -= 0.3f;
}
</pre>
Вот и все. Это все очень легко.
<p>Не хорошо как-то получается. Фигурки есть, а из чего они сделаны не понятно. Так что переходим в следующий шаг и делаем их из какого-нибудь материала.
<p><b>P.S.</b>
<p>А на последок рекоммендую посмотреть пример скелета приложения, которое может работать как в окне, так и в <b>full screen</b>.
<p><hr><center><font size=2><a href=prog/12.zip>Загрузить проект</a> | <a href=11.html>Предыдущий шаг</a> | <a href=13.html>Следующий Шаг</a> | <a href=opengl1.html>Оглавление</a></font></center>
<hr><center><font size=2>By <a href="mailto:kirill@scsc.ru@SUBJECT=OpenGLByStep">Kirill V. Ratkin</a>.</center></body></html>
