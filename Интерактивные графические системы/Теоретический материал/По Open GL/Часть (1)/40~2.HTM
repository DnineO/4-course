<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=win-1251">
</head>
<body text=black bgcolor=white link=blue vlink=blue alink=red>
<link rel=stylesheet type=text/css href=../../1.css>
<font color=red><h2 align=center>Шаг 40 - Кривые Безье.</h2></font>
Все предыдущие шаги мы строили "стандартные" математические фигуры, треугольники, кубики, шарики. А что делать если у нас есть несколько точек и мы хотим построить кривую или поверхность по этим точкам. Сглаживающие поверхности и кривые называют сплайнами. Есть много способов задания сплайна, но сейчас мы рассмотрим только кривые Безье.
<p>Кривую Безье можно построить и не пользуясь <b>OpenGL</b>, посмотрите <b>MSDN</b> на функцию <b>PolyBezier</b>, но этот подход нам не очень интересен ;). 
<p>Давайте посмотрим как такой сплайн построить с помощью <b>OpenGL</b>. Как обычно в <b>OpenGL</b> сначала мы устанавливаем и подготавливаем некие значения, а потом включаем режим их отображения. Для вычисления промежуточных точек кривой используется одномерный вычислитель (one-dimensional evaluator) (возможно, что перевод не совсем правильный, но я не математик и понятие не имею как корректно перевести это словосочетание на русски):
<pre>
	glMap1f(GL_MAP1_VERTEX_3, 0.0f, 1.0f, 3, 4, (const float*)m_Placeholders);
	glEnable(GL_MAP1_VERTEX_3);
</pre>
Вот он этот вычислитель. Первый параметр - символическая константа, в нашем случае <b>GL_MAP1_VERTEX_3</b>, говорит о том, что контрольная точка будет задаваться тройкой вещественных чисел. Второй и третий аргументы определяют начальный и конечный интервал рассчитываемой кривой. Надо сказать, что это некие относительные единицы измерения и логику их работы можно понять поэкспериментировав с ними. Четвертый параметр задает "шаг", т.е. сколько чисел содержится в считываемой порции данных, в нашем случае мы читаем по 3 числа, т.к. одна контрольная точка описывается 3 координатами. Важно здесь только то, что эти числа должны располагаться в памяти последовательно. Пятый параметр задает количество опорных точек, ну и шестой - массив с точками.
<p>Массив объявлен как член класса и заполняется в конструкторе:
<pre>
CExampleView::CExampleView()
{
	// TODO: add construction code here
	m_Placeholders[0][0] = -4.0f;
	m_Placeholders[0][1] = -4.0f;
	m_Placeholders[0][2] = 0.0f;

	m_Placeholders[1][0] = -2.0f;
	m_Placeholders[1][1] = 4.0f;
	m_Placeholders[1][2] = 0.0f;

	m_Placeholders[2][0] = 2.0f;
	m_Placeholders[2][1] = -4.0f;
	m_Placeholders[2][2] = 0.0f;

	m_Placeholders[3][0] = 4.0f;
	m_Placeholders[3][1] = 4.0f;
	m_Placeholders[3][2] = 0.0f;
}
</pre>
Теперь следом за <b>glMap1f</b> мы включаем этот одномерный вычислитель.
<p>На этом мы закончили этап подготовки к рисованию кровой. Перейдем к её отображению:
<pre>
void CExampleView::OnDraw(CDC* pDC)
{ 
    CExampleDoc* pDoc = GetDocument();
    ASSERT_VALID(pDoc);

    // TODO: add draw code for native data here
	glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glColor3f(0.0f, 0.5f, 0.5f);

	glBegin(GL_LINE_STRIP);
		for(int i=0; i<30; i++)
			glEvalCoord1f((float)i/30.0f);
	glEnd();
	SwapBuffers(pDC->m_hDC);
}
</pre>
При помощи специальной функции <b>glEvalCoord1f</b> мы как бы вычисляем координату <b>Y</b> задавая <b>X</b> (в данном случае правильнее будет их называть <b>V</b> и <b>U</b>) и рисуем точку. Поскольку мы производим эти вычисления внутри командных скобок <b>glBegin(GL_LINE_STRIP)</b> и <b>glEnd()</b>, то все точки у нас будут соединяться в прямые, отрисованные в режиме <b>STRIP</b>. Если вы забыли, что такое режим <b>STRIP</b>, то напоминаю, что это когда конечная точка одной прямой является первой для другой.
<p>Теперь относительно второго и третьего аргумента команды <b>glMap1f</b>. Попробуйте вместо 1.0 поставить 2.0, вы увидите половину кривой. А теперь в цикле измените предел по <b>i</b> с 30 на 60. Опять видите полную кривую.
<p>Вообще-то полигональные модели это не тривиальная область математики, поэтому нам, простым программерам, дано постичь эту штуку через руки, так что рекомендую поэкспериментировать с разными коэффициентами и просто посмотреть что получается.

<p><hr><center><font size=2><a href=prog/40.zip>Загрузить проект</a> | <a href=39.html>Предыдущий шаг</a> | <a href=41.html>Следующий Шаг</a> | <a href=opengl1.html>Оглавление</a></font></center>
<hr><center><font size=2>By <a href="mailto:kirill@scsc.ru@SUBJECT=OpenGLByStep">Kirill V. Ratkin</a>.</center></body></html>
